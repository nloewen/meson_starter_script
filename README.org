#+TITLE: Meson start scripts

* Skeleton C++ project

A simple script to create a messon project skeleton

#+NAME: cpp_meson
#+BEGIN_SRC meson
project('@ProjectSkeleton@', 'cpp',
	version : '0.0.1',
	default_options : ['cpp_std=c++17'])

gtest_proj = subproject('gtest')
gtest_dep = gtest_proj.get_variable('gtest_main_dep')

subdir('src')
subdir('test')
subdir('bin')
subdir('doc')
#+END_SRC

#+NAME: cpp_meson_src
#+BEGIN_SRC meson
inc = include_directories('.')

subdir('@ProjectSkeleton@')
#+END_SRC

#+NAME: cpp_meson_src_project
#+BEGIN_SRC meson
@ProjectSkeleton@_headers = ['hello.hpp']
@ProjectSkeleton@_sources = ['hello.cpp']

@ProjectSkeleton@_lib = library('@ProjectSkeleton@',
			sources: [@ProjectSkeleton@_headers,@ProjectSkeleton@_sources])

@ProjectSkeleton@_dep = declare_dependency(include_directories : inc,
				   link_with : @ProjectSkeleton@_lib)

install_headers(@ProjectSkeleton@_headers,
		subdir : '@ProjectSkeleton@')

#+END_SRC

#+NAME: cpp_meson_src_project_hello_hpp
#+BEGIN_SRC cpp :eval never
#include <string>

namespace @ProjectSkeleton@ {

    std::string hello();
    
}
#+END_SRC

#+NAME: cpp_meson_src_project_hello_cpp
#+BEGIN_SRC cpp :eval never
#include "hello.hpp"

namespace @ProjectSkeleton@ {

  std::string hello() {
    return "hello @ProjectSkeleton@";
  };
    
}
#+END_SRC

#+NAME: cpp_meson_subprojects_gtest
#+BEGIN_SRC meson
[wrap-file]
directory = googletest-release-1.8.0

source_url = https://github.com/google/googletest/archive/release-1.8.0.zip
source_filename = gtest-1.8.0.zip
source_hash = f3ed3b58511efd272eb074a3a6d6fb79d7c2e6a0e374323d1e6bcbcc1ef141bf

patch_url = https://wrapdb.mesonbuild.com/v1/projects/gtest/1.8.0/5/get_zip
patch_filename = gtest-1.8.0-5-wrap.zip
patch_hash = 7eeaede4aa2610a403313b74e04baf91ccfbaef03203d8f56312e22df1834ec5
#+END_SRC

#+NAME: cpp_meson_test
#+BEGIN_SRC meson
test_array = [['hello_test','hello_exe','hello.cpp']]

foreach test : test_array
  test(test.get(0),
       executable(test.get(1),
		  test.get(2),
		  dependencies
 		  : [ @ProjectSkeleton@_dep, gtest_dep ]))
endforeach
#+END_SRC

#+NAME: cpp_meson_test_hello_cpp
#+BEGIN_SRC meson
#include "@ProjectSkeleton@/hello.hpp"
#include <gtest/gtest.h>

using namespace @ProjectSkeleton@;

TEST(Hello, demo)
{
  ASSERT_EQ(hello(),"Hello @ProjectSkeleton@");
}
#+END_SRC

#+NAME: cpp_meson_bin 
#+BEGIN_SRC meson
hello_exe = executable('hello',
		       'hello.cpp',
		       dependencies : [@Project_Skeleton@_dep])
#+END_SRC

#+NAME: cpp_meson_bin_hello_cpp
#+BEGIN_SRC cpp
#include "@ProjectSkeleton@/hello.hpp"
#incldue <iostream>

using namespace @ProjectSkeleton@;

int main()
{
  std::cout << hello() << std::endl;
}
#+END_SRC

#+BEGIN_SRC bash :noweb yes :tangle yes :tangle create_meson_cpp_skeleton_project :shebang "#!/bin/bash" :exports code :eval never
set -e

ERROR=0
FORCE=0
PROJECT_ROOT_DIRECTORY=""

while [ "$1" != "" ]; do
    case $1 in
        -f )       FORCE=1
		   ;;
	-* )       ERROR=1
                   ;;
        ,* )       if [ "$PROJECT_ROOT_DIRECTORY" == "" ]; then 
		      PROJECT_ROOT_DIRECTORY=$1 
		  else 
		      ERROR=1 
		  fi 
    esac
    shift
done

if [ $ERROR == 1 ]; then
    echo "Usage: $(basename $0) PROJECT_ROOT_DIRECTORY -f"
    echo ""
    echo " Create a directory 'project_dir' and populate it with some configuration files"
    echo " By default never overwrite files, use -f to force overwriting"
    exit 0
fi

PROJECT_NAME=$(basename "$PROJECT_ROOT_DIRECTORY")

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY" 
mkdir -p "$PROJECT_ROOT_DIRECTORY"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/meson.build"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY/src" 
mkdir -p "$PROJECT_ROOT_DIRECTORY/src"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/src/meson.build"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_src>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY/src/$PROJECT_NAME" 
mkdir -p "$PROJECT_ROOT_DIRECTORY/src/$PROJECT_NAME"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/src/$PROJECT_NAME/meson.build"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_src_project>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/src/$PROJECT_NAME/hello.hpp"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_src_project_hello_hpp>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/src/$PROJECT_NAME/hello.cpp"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_src_project_hello_cpp>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY/subprojects" 
mkdir -p "$PROJECT_ROOT_DIRECTORY/subprojects"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/subprojects/gtest.wrap"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_subprojects_gtest>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY/test" 
mkdir -p "$PROJECT_ROOT_DIRECTORY/test"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/test/meson.build"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_test>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/test/hello.cpp"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_test_hello_cpp>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#================================================================

echo "Creates directory $PROJECT_ROOT_DIRECTORY/bin" 
mkdir -p "$PROJECT_ROOT_DIRECTORY/bin"

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/bin/meson.build"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_bin>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

CURRENT_FILE="$PROJECT_ROOT_DIRECTORY/bin/hello.cpp"

if [ "$FORCE" -eq 1 ] || [ ! -f "$CURRENT_FILE" ]; then
    echo "Creates file      $CURRENT_FILE" 
    more > "$CURRENT_FILE" <<'//MY_CODE_STREAM' 
<<cpp_meson_bin_hello_cpp>>
//MY_CODE_STREAM
    sed -i "s/@ProjectSkeleton@/$PROJECT_NAME/g" "$CURRENT_FILE"
else 
    echo "File $CURRENT_FILE already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
#+END_SRC
